package com.itpro.minitask.test;

import static com.google.appengine.api.datastore.FetchOptions.Builder.withLimit;
import static com.itpro.minitask.test.util.OfyService.factory;
import static com.itpro.minitask.test.util.OfyService.ofy;
import static com.itpro.minitask.test.util.OfyService.ds;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import junit.framework.TestCase;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.testng.annotations.BeforeTest;

import com.google.appengine.api.datastore.DatastoreService;
import com.google.appengine.api.datastore.DatastoreServiceFactory;
import com.google.appengine.api.datastore.Entity;
import com.google.appengine.api.datastore.FetchOptions;
import com.google.appengine.api.datastore.PreparedQuery;
import com.google.appengine.api.datastore.Query;
import com.google.appengine.api.memcache.MemcacheService;
import com.google.appengine.api.memcache.MemcacheServiceFactory;
import com.google.appengine.tools.development.testing.LocalDatastoreServiceTestConfig;
import com.google.appengine.tools.development.testing.LocalServiceTestHelper;
import com.google.appengine.tools.development.testing.LocalTaskQueueTestConfig;
import com.itpro.minitask.server.DataRequestService;
import com.itpro.minitask.shared.Task_Data;

public class TaskDataServiceTest extends TestCase{

	private final LocalServiceTestHelper helper = new LocalServiceTestHelper(
			new LocalTaskQueueTestConfig(),
			new LocalDatastoreServiceTestConfig());

	@Before
	public void setUp() {
		helper.setUp();
	}

	@After
	public void tearDown() {
		helper.tearDown();

	}

	/**
	 * create new task
	 * 
	 * @throws Exception
	 */
	@Test
	public void idIsGenerated() throws Exception {
		factory().register(Task_Data.class);
		DataRequestService dataRequest = new DataRequestService();
		Task_Data input = createTask();
		Task_Data output = dataRequest.insertTask(input);
		assertEquals(input, output);
	}

	protected Task_Data createTask() {
		Task_Data t = new Task_Data();
		t.setActivityDate(new Date());
		List<String> ccList = new ArrayList<String>();
		ccList.add("lent@itpro.vn");
		t.setCcList(ccList);
		t.setDescription("Thêm mô tả cho công việc");
		t.setDueDate(new Date());
		t.setFinishDate(new Date());
		t.setInitDate(new Date());
		List<Long> listChild = new ArrayList<Long>();
		listChild.add(12L);
		t.setListChild(listChild);
		t.setName("Tên công việc");
		t.setParentId(null);
		t.setPriority(1);
		t.setProjectId(13L);
		t.setRecipient("lent@itpro.vn");
		t.setSender("nguyenle@gmail.com");
		t.setSecurity(false);
		t.setState(0);
		t.setStatus(0);
		t.setUpdateDate(new Date());
		t.setVersion(t.getVersion() + 1);
		return t;
	}

	List<Task_Data> list;

	@BeforeTest
	public void autoGeneratedTask() throws Exception {
		factory().register(Task_Data.class);
		list = new ArrayList<Task_Data>();
		for (int i = 0; i < 10; i++) {
			Task_Data t = new Task_Data();
			int idInt = i + 10;
			Long id = (long) idInt;
			t.setId(id);
			t.setName("Công việc :" + i);
			t.setDescription("Mô tả công việc:" + i);
			t.setDueDate(new Date());
			t.setInitDate(new Date());
			t.setUpdateDate(new Date());
			t.setSender("nguyenle0190@gmail.com");
			t.setRecipient("lent@itpro.vn");
			t.setVersion(t.getVersion() + 1);
			t.setPriority(0);
			t.setState(0);
			t.setStatus(0);
			t.setSecurity(false);
			list.add(t);
			ofy().save().entity(t);

		}
	}
	@Test
	public void simpleQueryWorks() throws Exception {
		factory().register(Task_Data.class);

		Task_Data triv = new Task_Data();
		triv.setName("hehe");
		ofy().save().entity(triv).now();

		Query q = new Query("task_data");
		PreparedQuery pq = ds().prepare(q);
		List<Entity> stuff = pq.asList(FetchOptions.Builder.withDefaults());
		assert stuff.size() == 1;

		int count = 0;
		for (@SuppressWarnings("unused") Task_Data fetched: ofy().load().type(Task_Data.class)) {
			count++;
		}
		assert count == 1;
	}

	@Test
	public void findTask() throws Exception {
		Long id = (long) 10;
		DataRequestService dataRequest = new DataRequestService();
		Task_Data findTask = dataRequest.retrieveTask(id);
		assertEquals(findTask, null);
	}

	/**
	 * update task
	 */
	// run this test twice to prove we're not leaking any state across tests
	private void doTest() {
		DatastoreService ds = DatastoreServiceFactory.getDatastoreService();
		assertEquals(0,
				ds.prepare(new Query("yam")).countEntities(withLimit(10)));
		ds.put(new Entity("yam"));
		ds.put(new Entity("yam"));
		assertEquals(2,
				ds.prepare(new Query("yam")).countEntities(withLimit(10)));

	}

	private void doTest1() {
		MemcacheService ms = MemcacheServiceFactory.getMemcacheService();
		assertFalse(ms.contains("nguyenthile"));
		ms.put("nguyen", "foo");
		assertFalse(ms.contains("yar"));
	}

	@Test
	public void testInsert() {
		System.out.println("2");
		doTest();
	}

	@Test
	public void testInsert1() {
		System.out.println("3");
		doTest1();
	}

	@Test
	public void testAddition() {
		System.out.println("4");
		assertEquals(4, 2 + 2);

	}

}
